{ lib }:
# buildGens :: pkgs -> irByHost -> { hostName = drv; ... }
pkgs: irByHost:
lib.mapAttrs (_host: filesIR:
  pkgs.stdenvNoCC.mkDerivation {
    pname = "rxnix-gen-${_host}";
    version = "0.0.1";
    nativeBuildInputs = [ pkgs.jq ];
    preferLocalBuild = true;
    allowSubstitutes = false;
    buildCommand = ''
      set -euo pipefail
      mkdir -p "$out" "$out/payload"

      cat > "$out/manifest.json" <<'JSON'
${builtins.toJSON filesIR}
JSON

      jq -r '.files[] | @base64' "$out/manifest.json" | while read -r line; do
        obj=$(echo "$line" | base64 -d)
        srcRel=$(echo "$obj" | jq -r '.src')
        content=$(echo "$obj" | jq -r '."__content" // empty')
        source=$(echo "$obj" | jq -r '."__source"  // empty')

        dest="$out/payload/''${srcRel}"
        mkdir -p "$(dirname "$dest")"
        if [ -n "$content" ]; then
          printf "%s" "$content" > "$dest"
        elif [ -n "$source" ]; then
          cp -L "$source" "$dest"
        else
          echo "missing content/source" >&2
          exit 1
        fi
      done

      # placeholder MCL (replace with real mgmt file resource syntax)
      cat > "$out/mgmt.mcl" <<'MCL'
# AUTOGENERATED by rxnix (files-only PoC)
# Input: manifest.json
MCL
      jq -r '
        .files[]
        | "file \"" + .path + "\" {\n" +
          "  source  => \"" + ("payload/" + .src) + "\";\n" +
          "  owner   => \"" + .owner + "\",\n" +
          "  group   => \"" + .group + "\",\n" +
          "  mode    => \"" + .mode  + "\",\n" +
          "  state  => $const.res.file.state.exists,\n" +
          "}\n"
      ' "$out/manifest.json" >> "$out/mgmt.mcl"

      cat > "$out/switch-to-configuration" <<'SH'
#!/usr/bin/env bash
set -euo pipefail
GEN="$1"
PROFILE="/nix/var/nix/profiles/mgmt/current"
mkdir -p "$(dirname "$PROFILE")"
ln -sfn "$GEN" "$PROFILE"
systemctl daemon-reload || true
systemctl restart mgmt-apply.service
echo "Switched mgmt to $GEN"
SH
      chmod +x "$out/switch-to-configuration"
    '';
  }
) irByHost
