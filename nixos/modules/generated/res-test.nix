# Auto-generated by options-generator. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.test = mkOption {
    description = ''TestRes is a resource that is mostly harmless and is used for internal tests.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        alwaysgroup = mkOption {
          type = types.bool;
          description = ''set to true to cause auto grouping'';
        };
        anotherstr = mkOption {
          type = types.str;
          description = "";
        };
        bool = mkOption {
          type = types.bool;
          description = "";
        };
        boolptr = mkOption {
          type = lib.types.nullOr (types.bool);
          description = "";
          default = null;
        };
        byte = mkOption {
          type = types.str;
          description = ''alias for uint8'';
        };
        comment = mkOption {
          type = types.str;
          description = "";
        };
        comparefail = mkOption {
          type = types.bool;
          description = ''will compare fail?'';
        };
        complex128 = mkOption {
          type = types.str;
          description = "";
        };
        complex64 = mkOption {
          type = types.str;
          description = "";
        };
        expectrecv = mkOption {
          type = lib.types.nullOr (types.str);
          description = ''what keys should we expect from send/recv?'';
          default = null;
        };
        float32 = mkOption {
          type = types.float;
          description = "";
        };
        float64 = mkOption {
          type = types.float;
          description = "";
        };
        func1 = mkOption {
          type = types.str;
          description = ''Func1 passes the value 42 to the input and returns a string.'';
        };
        int = mkOption {
          type = types.int;
          description = "";
        };
        int16 = mkOption {
          type = types.int;
          description = "";
        };
        int32 = mkOption {
          type = types.int;
          description = "";
        };
        int64 = mkOption {
          type = types.int;
          description = "";
        };
        int64ptr = mkOption {
          type = lib.types.nullOr (types.str);
          description = "";
          default = null;
        };
        int8 = mkOption {
          type = types.int;
          description = "";
        };
        int8ptr = mkOption {
          type = lib.types.nullOr (types.str);
          description = "";
          default = null;
        };
        int8ptrptrptr = mkOption {
          type = lib.types.nullOr (types.str);
          description = ''Int8PtrPtrPtr probably makes no sense, but is legal.'';
          default = null;
        };
        interface = mkOption {
          type = types.str;
          description = "";
        };
        mapintfloat = mkOption {
          type = types.attrsOf types.str;
          description = "";
        };
        mixedstruct = mkOption {
          type = types.str;
          description = "";
        };
        onlyshow = mkOption {
          type = types.listOf types.str;
          description = ''what values do we show?'';
        };
        rune = mkOption {
          type = types.str;
          description = ''alias for int32, represents a Unicode code point'';
        };
        sendvalue = mkOption {
          type = types.str;
          description = ''what value should we send?'';
        };
        slicestring = mkOption {
          type = types.listOf types.str;
          description = "";
        };
        str = mkOption {
          type = types.str;
          description = ''can'''t name it String because of String()'';
        };
        stringptr = mkOption {
          type = lib.types.nullOr (types.str);
          description = ''TODO: tag name?'';
          default = null;
        };
        uint = mkOption {
          type = types.int;
          description = "";
        };
        uint16 = mkOption {
          type = types.int;
          description = "";
        };
        uint32 = mkOption {
          type = types.int;
          description = "";
        };
        uint64 = mkOption {
          type = types.int;
          description = "";
        };
        uint8 = mkOption {
          type = types.int;
          description = "";
        };
        uint8ptr = mkOption {
          type = lib.types.nullOr (types.str);
          description = "";
          default = null;
        };
        validatebool = mkOption {
          type = types.bool;
          description = ''set to true to cause a validate error'';
        };
        validateerror = mkOption {
          type = types.str;
          description = ''set to cause a validate error'';
        };
      };
    }));
    default = {};
  };
}
