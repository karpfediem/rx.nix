# Auto-generated by options-generator. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.kv = mkOption {
    description = ''KVRes is a resource which writes a key/value pair into cluster wide storage.
It will ensure that the key is set to the requested value. The one exception
is that if you use the SkipLessThan parameter, then it will only replace the
stored value with the requested value if it is greater than that stored one.
This allows the KV resource to be used in fast acting, finite state machines
which have monotonically increasing state values that represent progression.
The one exception is that when this resource receives a refresh signal, then
it will set the value to be the exact one if they are not identical already.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        key = mkOption {
          type = types.str;
          description = ''Key represents the key to set. If it is not specified, the Name value
is used instead.'';
        };
        mapped = mkOption {
          type = types.bool;
          description = ''Mapped specifies that we will store the value in a map with each
hostname as part of the key. This is very useful for exchanging
values when running this resource on multiple nodes simultaneously.
To read/write/watch a single, global key, this value should be false.
Note that resources may fight if more than one uses this. The `world`
functions like `exchange`, require this to be true, since they'''re
pulling values out of a pool that each node sets. The `world`
functions like `getval`, require this to be false, since they'''re
pulling values directly out of the same namespace that is shared by
all nodes.'';
        };
        skipcmpstyle = mkOption {
          type = types.str;
          description = ''SkipCmpStyle is the type of compare function used when determining if
the value is greater when using the SkipLessThan parameter.'';
        };
        skiplessthan = mkOption {
          type = types.bool;
          description = ''SkipLessThan causes the value to be updated as long as it is greater.'';
        };
        value = mkOption {
          type = lib.types.nullOr (types.str);
          description = ''Value represents the string value to set. If this value is nil or,
undefined, then this will delete that key.'';
          default = null;
        };
      };
    }));
    default = {};
  };
}
