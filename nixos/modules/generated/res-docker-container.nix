# Auto-generated by options-generator. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.docker-container = mkOption {
    description = ''DockerContainerRes is a docker container resource.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        apiversion = mkOption {
          type = types.nullOr (types.str);
          description = ''APIVersion allows you to override the host'''s default client API
version.'';
        };
        cmd = mkOption {
          type = types.nullOr (types.listOf types.str);
          description = ''Cmd is a command, or list of commands to run on the container.'';
        };
        env = mkOption {
          type = types.nullOr (types.listOf types.str);
          description = ''Env is a list of environment variables. E.g. ["VAR=val",].'';
        };
        force = mkOption {
          type = types.nullOr (types.bool);
          description = ''Force, if true, this will destroy and redeploy the container if the
image is incorrect.'';
        };
        image = mkOption {
          type = types.nullOr (types.str);
          description = ''Image is a docker image, or image:tag.'';
        };
        ports = mkOption {
          type = types.nullOr (types.attrsOf types.str);
          description = ''Ports is a map of port bindings. E.g. {"tcp" => {8080 => 80},}. The
key is the host port, and the val is the inner service port to
forward to.'';
        };
        state = mkOption {
          type = types.nullOr (types.str);
          description = ''State of the container must be running, stopped, or removed.'';
        };
      };
    }));
    default = {};
  };
}
