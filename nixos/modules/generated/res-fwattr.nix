# Auto-generated by codegen. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.fwattr = mkOption {
    description = ''FWAttrRes is a resource for interacting with the kernel firmware attributes
API. Please note that on some platforms such as Lenovo, there is an
architectural limitation that prevents more than 48 attributes from being set
before presumably needing to reboot.

https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-firmware-attributes

XXX: We could count the number of changes, and error before we hit 48+?
Apparently if we go over, you need to manually enter the BIOS to clear the
error. Of course we can never know if the user edited these elsewhere.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        check = mkOption {
          type = types.nullOr (types.bool);
          description = ''Check (which defaults to true) turns off the validation that runs
before we attempt to change a setting. This should only be used in
rare exceptions where you have an old/buggy version of firmware that
has illogical data presented through the kernel API. For example, one
version of BootOrder on thinklmi had type "enumeration" and
"possible_values" of: `HDD0;HDD1;HDD2;...` but took a "current_value"
of `HDD0:HDD1:HDD2:...` which would be illogical. Newer versions just
have type "string".'';
          default = null;
        };
        driver = mkOption {
          type = types.nullOr (types.str);
          description = ''Driver is the interface that is supported. Available options can be
found in the /sys/class/firmware-attributes/ directory. Common values
include "thinklmi" (lenovo), "dell-wmi-sysman" (dell) and more. If
you do not specify this, then we will attempt to determine it
automatically, however if zero or more than one option exists, then
this will error.'';
          default = null;
        };
        key = mkOption {
          type = types.nullOr (types.str);
          description = ''Key is the name of the field to modify. If this is not set we use the
Name field. This is case sensitive.'';
          default = null;
        };
        skip = mkOption {
          type = types.nullOr (types.bool);
          description = ''Skip let'''s you turn this resource into a "noop" if the key doesn'''t
exist. This should ideally not be used because a typo would
effectively make this resource ineffective. As a result, if you use
this, it will emit a warning. This option is very useful, because you
can add a more general "configuration set" of values to all of your
machine, without having to match them precisely, and this won'''t cause
errors if one of them has an old version of a BIOS without that
feature.'';
          default = null;
        };
        value = mkOption {
          type = types.nullOr (types.str);
          description = ''Value is the string value to set. Make sure you specify it in the
same format that the kernel offers it as to avoid automation
"flapping" or errors. You can test this by writing a value to the
/sys/class/firmware-attributes/<driver>/<key>/current_value path with
`echo foo >` and seeing if it works without erroring. You must not
include the trailing newline which is present all values.'';
          default = null;
        };
      };
    }));
    default = {};
  };
}
