# Auto-generated by options-generator. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.sysctl = mkOption {
    description = ''SysctlRes is a resource for setting kernel parameters.
TODO: Add a sysctl:clean resource that removes any unmanaged files from
/etc/sysctl.d/ and optionally blanks out the stock /etc/sysctl.conf file too.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        path = mkOption {
          type = types.nullOr (types.str);
          description = ''Filename is the full path for the persistence file which is usually
read on boot. We usually use entries in the /etc/sysctl.d/ directory.
By convention, they end in .conf and start with a numeric prefix and
a dash. For example: /etc/sysctl.d/10-dmesg.conf for example. If this
is omitted, the filename will be chosen automatically.'';
        };
        persist = mkOption {
          type = types.nullOr (types.bool);
          description = ''Persist specifies whether this value should be stored on disk where
it will persist across reboots. It defaults to true. Keep in mind,
that if this is not used, but `Runtime` is true, then the value will
be restored anyways if `mgmt` runs on boot, which may be what you
want anyways.'';
        };
        runtime = mkOption {
          type = types.nullOr (types.bool);
          description = ''Runtime specifies whether this value should be set immediately. It
defaults to true. If this is not set, then the value must be set in a
file and the machine will have to reboot for the setting to take
effect.'';
        };
        value = mkOption {
          type = types.nullOr (types.str);
          description = ''Value is the string value to set. Make sure you specify it in the
same format that the kernel parses it as to avoid automation
"flapping". You can test this by writing a value to the correct
/proc/sys/ path entry with `echo foo >` and then reading it back out
and seeing what the "parsed" correct format is. You must not include
the trailing newline which is present in the readback for all values.'';
        };
      };
    }));
    default = {};
  };
}
