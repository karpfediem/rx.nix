# Auto-generated by codegen. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.dhcp-range = mkOption {
    description = ''DHCPRangeRes is a representation of a range allocator in DHCP. To declare a
range you must specify either the `network` field or the `from` and `to`
fields as ip with cidr'''s, or `from` and `to` fields without cidr'''s but with
the `mask` field as either a dotted netmask or a `/number` field. If you
specify none of these, then the resource name will be interpreted the same
way that the `network` field os. The last ip in the range (which is often
used as a broadcast address) is never allocated.
TODO: Add a setting to determine if we should allocate the last address.'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        from = mkOption {
          type = types.nullOr (types.str);
          description = ''From is the start address in the range inclusive. If it is specified
in cidr notation, then the `mask` field must not be used. Otherwise
it must be used. In both situations the cidr or mask must be
consistent with the `to` field. If this field is used, you must not
use the `network` field.'';
          default = null;
        };
        mask = mkOption {
          type = types.nullOr (types.str);
          description = ''Mask is the cidr or netmask of ip addresses in the specified range.
This field must only be used if both `from` and `to` are specified,
and if neither of them specify a cidr suffix. If neither do, then the
mask here can be in either dotted format or, preferably, in cidr
format by starting with a slash.'';
          default = null;
        };
        nbp = mkOption {
          type = types.nullOr (types.str);
          description = ''NBP is the network boot program URL. This is used for the tftp server
name and the boot file name. For example, you might use:
tftp://192.0.2.13/pxelinux.0 for a common bios, pxe boot setup. Note
that the "scheme" prefix is required, and that it'''s impossible to
specify a file that doesn'''t begin with a leading slash. If you wish
to specify a "root less" file (common for legacy tftp setups) then
you can use this feature in conjunction with the NBPPath parameter.
For DHCPv4, the scheme must be "tftp".'';
          default = null;
        };
        nbp_path = mkOption {
          type = types.nullOr (types.str);
          description = ''NBPPath overrides the path that is sent for the nbp protocols. By
default it is taken from parsing a URL in NBP, but this can override
that. This is useful if you require a path that doesn'''t start with a
slash. This is sometimes desirable for legacy tftp setups.'';
          default = null;
        };
        network = mkOption {
          type = types.nullOr (types.str);
          description = ''Network is the network number and cidr to determine the range. For
example, the common network range of 192.168.42.1 to 192.168.42.255
should have a network field here of 192.168.42.0/24. You can either
specify this field or `from` and `to`, but not a different
combination. If you don'''t specify any of these fields, then the
resource name will be parsed as if it was used here.'';
          default = null;
        };
        persist = mkOption {
          type = types.nullOr (types.bool);
          description = ''Persist should be true if you want to persist the lease information
to disk so that a new (or changed) invocation of this resource with
the same name, will regain that existing initial state at startup.
TODO: Add a new param to persist the data to etcd in the world API so
that we could have redundant dhcp servers which share the same state.
This would require having a distributed allocator through etcd too!
TODO: Consider adding a new param to erase the persisted record
database if any field param changes, as opposed to just looking at
the name field alone.
XXX: This is currently not implemented.'';
          default = null;
        };
        server = mkOption {
          type = types.nullOr (types.str);
          description = ''Server is the name of the dhcp server resource to group this into. If
it is omitted, and there is only a single dhcp resource, then it will
be grouped into it automatically. If there is more than one main dhcp
resource being used, then the grouping behaviour is *undefined* when
this is not specified, and it is not recommended to leave this blank!'';
          default = null;
        };
        skip = mkOption {
          type = types.nullOr (types.listOf types.str);
          description = ''Skip is a list ip'''s in either cidr or standalone representation which
will be skipped and not allocated.'';
          default = null;
        };
        to = mkOption {
          type = types.nullOr (types.str);
          description = ''To is the end address in the range inclusive. If it is specified in
cidr notation, then the `mask` field must not be used. Otherwise it
must be used. In both situations the cidr or mask must be consistent
with the `from` field. If this field is used, you must not use the
`network` field.'';
          default = null;
        };
      };
    }));
    default = {};
  };
}
