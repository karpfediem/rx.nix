# Auto-generated by codegen. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.pippet = mkOption {
    description = ''PippetRes is a wrapper resource for puppet. It implements the functional
equivalent of an exec resource that calls "puppet resource <type> <title>
<params>", but offers superior performance through a long-running Puppet
process that receives resources through a pipe (hence the name).'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        params = mkOption {
          type = types.nullOr (types.str);
          description = ''Params is expected to be a hash in YAML format, pairing resource
parameter names with their respective values, e.g. { ensure: present
}'';
          default = null;
        };
        title = mkOption {
          type = types.nullOr (types.str);
          description = ''Title is used by Puppet as the resource title. Puppet will often
assign special meaning to the title, e.g. use it as the path for a
file resource, or the name of a package.'';
          default = null;
        };
        type = mkOption {
          type = types.nullOr (types.str);
          description = ''Type is the exact name of the wrapped Puppet resource type, e.g.
"file", "mount". This needs not be a core type. It can be a type
from a module. The Puppet installation local to the mgmt agent
machine must be able recognize it. It has to be a native type though,
as opposed to defined types from your Puppet manifest code.'';
          default = null;
        };
      };
    }));
    default = {};
  };
}
