# Auto-generated by codegen. Do not edit.
{ lib, ... }:
let
  inherit (lib) mkOption types;
in
{
  options.rx.res.dhcp-server = mkOption {
    description = ''
DHCPServerRes is a simple dhcp server resource. It responds to dhcp client
requests, but does not actually apply any state. The name is used as the
address to listen on, unless the Address field is specified, and in that case
it is used instead. The resource can offer up dhcp client leases from any
number of dhcp:host resources which will get autogrouped into this resource
at runtime.

This server is not meant as a featureful replacement for the venerable dhcpd,
but rather as a simple, dynamic, integrated alternative for bootstrapping new
machines and clusters in an elegant way.

TODO: Add autoedges between the Interface and any identically named NetRes.
'';
    type = types.attrsOf (types.submodule ({ name, ... }: {
      options = {
        address = mkOption {
          type = types.nullOr (types.str);
          description = ''
Address is the listen address to use for the dhcp server. It is
common to use `:67` (the standard) to listen on UDP port 67 on all
addresses.
'';
          default = null;
        };
        dns = mkOption {
          type = types.nullOr (types.listOf types.str);
          description = ''
DNS represents a list of DNS servers to offer to the DHCP client.
XXX: Is it mandatory? https://github.com/insomniacslk/dhcp/issues/359
'';
          default = null;
        };
        interface = mkOption {
          type = types.nullOr (types.str);
          description = ''
Interface is interface to bind to. For example `eth0` for the common
case. You may leave this field blank to not run any specific binding.
XXX: You need to actually specify an interface here at the moment. :(
BUG: https://github.com/insomniacslk/dhcp/issues/372
'';
          default = null;
        };
        leasetime = mkOption {
          type = types.nullOr (types.str);
          description = ''
LeaseTime is the default lease duration in a format that is parseable
by the golang time.ParseDuration function, for example "60s" or "10m"
or "1h42m13s". If it is unspecified, then a default will be used. If
the empty string is specified, then no lease time will be set in the
DHCP protocol, and your DHCP server might not work as you intend.
'';
          default = null;
        };
        nbp = mkOption {
          type = types.nullOr (types.str);
          description = ''
NBP is the network boot program URL. This is used for the tftp server
name and the boot file name. For example, you might use:
tftp://192.0.2.13/pxelinux.0 for a common bios, pxe boot setup. Note
that the "scheme" prefix is required, and that it's impossible to
specify a file that doesn't begin with a leading slash. If you wish
to specify a "root less" file (common for legacy tftp setups) then
you can use this feature in conjunction with the NBPPath parameter.
For DHCPv4, the scheme must be "tftp". This values is used as the
default for all dhcp:host resources. You can specify this here, and
the NBPPath per-resource and they will successfully combine.
'';
          default = null;
        };
        routers = mkOption {
          type = types.nullOr (types.listOf types.str);
          description = ''
Routers represents a list of routers to offer to the DHCP client. It
is most common to only specify one unless you know what you're doing.
'';
          default = null;
        };
        serverid = mkOption {
          type = types.nullOr (types.str);
          description = ''
ServerID is a unique IPv4 identifier for this server as specified in
the DHCPv4 protocol. It is almost always the IP address of the DHCP
server. If you don't specify this, then we will attempt to determine
it from the specified interface. If it is set to the empty string,
then this won't be set in the DHCP protocol, and your DHCP server
might not work as you intend. Otherwise, if a valid value is
specified, then this will be used as long as it validates correctly.
Please note that if you attempt to automatically determine this from
the specified interface, then this only happens at runtime when the
first DHCP request needs this or during CheckApply, either of which
could fail if for some reason it is not available.
'';
          default = null;
        };
      };
    }));
    default = {};
  };
}
